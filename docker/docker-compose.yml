services:
  # MySQL 数据库服务 (版本 9.3.0)
  mysql:
    image: mysql:9.3.0
    container_name: mysql_db
    networks:
      service_net:
        ipv4_address: 172.28.0.10
    environment:
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_DATABASE: nacos_config
      MYSQL_USER: nacos
      MYSQL_PASSWORD: "nacos"
    volumes:
      - type: bind
        source: ./docker-compose/mysql/data
        target: /var/lib/mysql
      - type: bind
        source: ./docker-compose/mysql/config
        target: /etc/mysql/conf.d
      - type: bind
        source: ./docker-compose/mysql/logs
        target: /var/log/mysql
      - type: bind
        source: ./docker-compose/mysql/init
        target: /docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 5s
      timeout: 10s
      retries: 10

  # Redis 服务 (版本 8.2.1-alpine3.22)
  redis:
    image: redis:7.4.5-bookworm
    container_name: redis_cache
    networks:
      service_net:
        ipv4_address: 172.28.0.20
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
    volumes:
      - type: bind
        source: ./docker-compose/redis/data
        target: /data
      - type: bind
        source: ./docker-compose/redis/conf
        target: /usr/local/etc/redis
      - type: bind
        source: ./docker-compose/redis/logs
        target: /var/log/redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Nacos 服务 (版本 v3.0.2)
  nacos:
    image: nacos/nacos-server:v3.0.2
    container_name: nacos_server
    networks:
      service_net:
        ipv4_address: 172.28.0.30
    environment:
      MODE: standalone
      NACOS_SERVER_IP: 172.28.0.30

      SPRING_DATASOURCE_PLATFORM: mysql
      MYSQL_SERVICE_HOST: 172.28.0.10
      MYSQL_SERVICE_PORT: 3306
      MYSQL_SERVICE_DB_NAME: nacos_config
      MYSQL_SERVICE_USER: nacos
      MYSQL_SERVICE_PASSWORD: nacos
      MYSQL_DATABASE_NUM: 1
      MYSQL_SERVICE_DB_PARAM: "characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useSSL=false"

      # 路径修复（解决404错误）
      NACOS_SERVER_CONTEXTPATH: /nacos  # 主服务路径
      NACOS_CONSOLE_CONTEXTPATH: /nacos  # 控制台路径
      NACOS_CONSOLE_REMOTE_SERVER_CONTEXT_PATH: /nacos  # 控制台连接服务端路径

      # 鉴权配置
      NACOS_AUTH_ENABLE: "true"  # 开启鉴权
      NACOS_AUTH_IDENTITY_KEY: ServerIdentity_Key  # 集群通信密钥
      NACOS_AUTH_IDENTITY_VALUE: ServerIdentity_Value_123
      NACOS_AUTH_TOKEN: VGhpc0lzTXlDdXN0b21TZWNyZXRLZXkwMTIzNDU2Nzg=  # 32位Base64密钥
      NACOS_SECURITY_IGNORE_URLS: "/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-ui/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**"  # 白名单

      # 管理员账号
      NACOS_SECURITY_ADMIN_USER: root  # 自定义管理员
      NACOS_SECURITY_ADMIN_PASSWORD: root

      # 命名空间权限
      NACOS_CORE_AUTH_DEFAULT_ROLES: ADMIN
      NACOS_CORE_AUTH_DEFAULT_RESOURCE: "public:*:*"
      # JVM配置
      JVM_XMS: 512m
      JVM_XMX: 512m
      NACOS_NAMING_EMPTY_SERVICE_AUTO_CLEAN: "true"

    ports:
      - "8848:8848"
      - "9090:9090"
      - "9848:9848"
    volumes:
      - type: bind
        source: ./docker-compose/nacos/logs
        target: /home/nacos/logs
      - type: bind
        source: ./docker-compose/nacos/conf
        target: /home/nacos/conf
      - type: bind
        source: ./docker-compose/nacos/data
        target: /home/nacos/data
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9090/nacos/" ]
      interval: 10s
      timeout: 5s
      retries: 12
  # NameServer 服务 (版本 5.3.3)
  namesrv:
    image: apache/rocketmq:5.3.2
    container_name: rmqnamesrv
    networks:
      service_net:
        ipv4_address: 172.28.0.40
    ports:
      - "39876:9876"  # NameServer 端口
    volumes:
      - type: bind
        source: ./docker-compose/rocketmq/namesrv/logs
        target: /home/rocketmq/namesrv/logs
      - type: bind
        source: ./docker-compose/rocketmq/namesrv/store
        target: /home/rocketmq/namesrv/store
    environment:
      - NAMESRV_ADDR=172.28.0.40:9876
    command: sh mqnamesrv
  # Broker 服务 (版本 5.3.2) - 采用 Local 模式，与 Proxy 同进程部署
  broker:
    image: apache/rocketmq:5.3.2
    container_name: rmqbroker
    networks:
      service_net:
        ipv4_address: 172.28.0.50
    depends_on:
      - namesrv
    ports:
      - "30909:10909"  # Broker VIP 端口
      - "30911:10911"  # Broker 主端口
      - "30912:10912"  # Broker HA 端口
      - "38080:8080"   # Proxy 端口1 (现在由 Broker 容器暴露)
      - "38081:8081"   # Proxy 端口2 (现在由 Broker 容器暴露)
    volumes:
      - type: bind
        source: ./docker-compose/rocketmq/broker/logs
        target: /home/rocketmq/logs
      - type: bind
        source: ./docker-compose/rocketmq/broker/store
        target: /home/rocketmq/store
      - type: bind
        source: ./docker-compose/rocketmq/broker/conf
        target: /home/rocketmq/conf
    environment:
      - NAMESRV_ADDR=172.28.0.40:9876
    # 关键：使用 --enable-proxy 参数启动，启用 Local 模式
    command: sh mqbroker -n 172.28.0.40:9876 --enable-proxy -c /home/rocketmq/conf/broker.conf

  # RocketMQ 控制台
  rmq-console:
    image: apacherocketmq/rocketmq-dashboard:2.1.0
    container_name: rmq-console
    networks:
      service_net:
        ipv4_address: 172.28.0.65
    depends_on:
      - namesrv
    ports:
      - "38082:8082"
    environment:
      JAVA_OPTS: -Drocketmq.namesrv.addr=172.28.0.40:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false

  # Nginx 反向代理 (版本 stable-perl)
  nginx:
    image: nginx:stable-perl
    container_name: nginx_gateway
    networks:
      service_net:
        ipv4_address: 172.28.0.70
    ports:
      - "80:80"      # HTTP 服务
      - "443:443"    # HTTPS 服务
    volumes:
      - type: bind
        source: ./docker-compose/nginx/config
        target: /etc/nginx
      - type: bind
        source: ./docker-compose/nginx/logs
        target: /var/log/nginx
      - type: bind
        source: ./docker-compose/nginx/html
        target: /usr/share/nginx/html
    depends_on:
      - nacos
  # MinIO 服务 (版本 RELEASE.2023-05-05T01-05-05Z)
  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z-cpuv1
    container_name: minio
    networks:
      service_net:
        ipv4_address: 172.28.0.80
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - type: bind
        source: ./docker-compose/minio/data
        target: /home/minio/data
  #  Elasticsearch 服务 (版本 9.1.2)
  elasticsearch:
    image: elasticsearch:9.1.2
    container_name: es_search
    networks:
      service_net:
        ipv4_address: 172.28.0.90  # 分配新 IP
    environment:
      # 关键配置
      - discovery.type=single-node  # 单节点模式
      - ES_JAVA_OPTS=-Xms1g -Xmx1g  # JVM 堆内存
      - bootstrap.memory_lock=true  # 禁用交换分区
      - xpack.security.enabled=false  # 关闭安全认证
      - http.cors.enabled=true
      - http.cors.allow-origin=" *"
    volumes:
      - type: bind
        source: ./docker-compose/elasticsearch/data
        target: /usr/share/elasticsearch/data
      - type: bind
        source: ./docker-compose/elasticsearch/plugins
        target: /usr/share/elasticsearch/plugins
    ports:
      - "9200:9200"  # HTTP API 端口
      - "9300:9300"  # 集群通信端口
    ulimits: # 解除内存限制
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200" ]
      interval: 10s
      timeout: 5s
      retries: 12
  # Kibana
  kibana:
    image: kibana:9.1.2
    container_name: kibana_es
    depends_on:
      - elasticsearch
    networks:
      service_net:
        ipv4_address: 172.28.0.100
    ports:
      - "5601:5601"
    environment:
      # 核心连接配置
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_HOST=0.0.0.0
      - SERVER_NAME=kibana-service

      # 性能调优参数
      - NODE_OPTIONS=--max-old-space-size=2048

      # 禁用不需要的功能模块
      - XPACK_APM_ENABLED=false
      - XPACK_INFRA_ENABLED=false
      - XPACK_MONITORING_UI_ENABLED=false
      - XPACK_OBSERVABILITY_ENABLED=false
      - TELEMETRY_ENABLED=false

      # 日志配置
      - LOGGING_JSON_ENABLED=false
    volumes:
      - type: bind
        source: ./docker-compose/kibana/config
        target: /usr/share/kibana/config
        # 挂载数据目录 (可选)
      - type: bind
        source: ./docker-compose/kibana/data
        target: /usr/share/kibana/data
    healthcheck: # 增加健康检查
      test: [ "CMD", "curl", "-f", "http://localhost:5601/api/status" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
# 网络配置
networks:
  service_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/24
          gateway: 172.28.0.1