<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cloud.stock.mapper.StockMapper">

    <resultMap id="BaseResultMap" type="com.cloud.stock.module.entity.Stock">
        <id property="id" column="id"/>
        <result property="productId" column="product_id"/>
        <result property="productName" column="product_name"/>
        <result property="stockQuantity" column="stock_quantity"/>
        <result property="frozenQuantity" column="frozen_quantity"/>
        <result property="stockStatus" column="stock_status"/>
        <result property="version" column="version"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="deleted" column="deleted"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,product_id,product_name,stock_quantity,frozen_quantity,
        stock_status,version,created_at,updated_at,deleted
    </sql>

    <!-- 更新库存数量 -->
    <update id="updateStockQuantity">
        UPDATE stock
        SET stock_quantity = stock_quantity + #{quantity},
            version        = version + 1,
            updated_at     = NOW()
        WHERE id = #{stockId}
          AND stock_quantity + #{quantity} >= 0
          AND deleted = 0
    </update>

    <!-- 冻结库存 -->
    <update id="freezeStock">
        UPDATE stock
        SET frozen_quantity = frozen_quantity + #{quantity},
            version         = version + 1,
            updated_at      = NOW()
        WHERE id = #{stockId}
          AND stock_quantity - frozen_quantity >= #{quantity}
          AND deleted = 0
    </update>

    <!-- 解冻库存 -->
    <update id="unfreezeStock">
        UPDATE stock
        SET frozen_quantity = frozen_quantity - #{quantity},
            version         = version + 1,
            updated_at      = NOW()
        WHERE id = #{stockId}
          AND frozen_quantity >= #{quantity}
          AND deleted = 0
    </update>

    <!-- ==================== 条件更新SQL（并发安全） ==================== -->

    <!-- 条件出库 - 扣减可用库存 -->
    <update id="stockOutWithCondition">
        UPDATE stock
        SET stock_quantity = stock_quantity - #{quantity},
            updated_at     = NOW(),
            version        = version + 1
        WHERE product_id = #{productId}
          AND deleted = 0
          AND stock_status = 1
          AND (stock_quantity - frozen_quantity) >= #{quantity}
    </update>

    <!-- 条件预留库存 - 冻结可用库存 -->
    <update id="reserveStockWithCondition">
        UPDATE stock
        SET frozen_quantity = frozen_quantity + #{quantity},
            updated_at      = NOW(),
            version         = version + 1
        WHERE product_id = #{productId}
          AND deleted = 0
          AND stock_status = 1
          AND (stock_quantity - frozen_quantity) >= #{quantity}
    </update>

    <!-- 条件释放预留库存 - 解冻库存 -->
    <update id="releaseReservedStockWithCondition">
        UPDATE stock
        SET frozen_quantity = frozen_quantity - #{quantity},
            updated_at      = NOW(),
            version         = version + 1
        WHERE product_id = #{productId}
          AND deleted = 0
          AND frozen_quantity >= #{quantity}
    </update>

    <!-- 条件确认出库 - 从冻结库存中扣减 -->
    <update id="confirmStockOutWithCondition">
        UPDATE stock
        SET stock_quantity  = stock_quantity - #{quantity},
            frozen_quantity = frozen_quantity - #{quantity},
            updated_at      = NOW(),
            version         = version + 1
        WHERE product_id = #{productId}
          AND deleted = 0
          AND frozen_quantity >= #{quantity}
    </update>

    <!-- 条件入库 - 增加总库存 -->
    <update id="stockInWithCondition">
        UPDATE stock
        SET stock_quantity = stock_quantity + #{quantity},
            updated_at     = NOW(),
            version        = version + 1
        WHERE product_id = #{productId}
          AND deleted = 0
    </update>

    <!-- 根据商品ID查询库存（加行锁） -->
    <select id="selectByProductIdForUpdate" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM stock
        WHERE product_id = #{productId}
        AND deleted = 0
        FOR UPDATE
    </select>

</mapper>
