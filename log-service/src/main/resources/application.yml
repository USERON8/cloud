server:
  port: 8088

spring:
  application:
    name: log-service
  profiles:
    active: dev

  # Nacos 配置
  cloud:
    nacos:
      discovery:
        server-addr: ${NACOS_SERVER_ADDR:localhost:8848}
        username: nacos
        password: nacos
        namespace: public
        group: DEFAULT_GROUP
      config:
        server-addr: ${NACOS_SERVER_ADDR:localhost:8848}
        username: nacos
        password: nacos
        namespace: public
        file-extension: yaml
        group: DEFAULT_GROUP
    stream:
      function:
        definition: userEventConsumer
      rocketmq:
        binder:
          name-server: 127.0.0.1:39876
        bindings:
          userEventConsumer-in-0:
            consumer:
              # 指定订阅的Tag，多个Tag用||分隔
              subscription: 'user-created||user-updated||user-deleted||user-status-changed'
              push:
                orderly: false
      bindings:
        userEventConsumer-in-0:
          destination: user-events
          content-type: application/json
          group: log-service-group
        userLog-in-0:
          destination: LOG_USER_TOPIC
          content-type: application/json
          group: log-group
        merchantLog-in-0:
          destination: LOG_MERCHANT_TOPIC
          content-type: application/json
          group: log-group
        adminLog-in-0:
          destination: LOG_ADMIN_TOPIC
          content-type: application/json
          group: log-group
        productLog-in-0:
          destination: LOG_PRODUCT_TOPIC
          content-type: application/json
          group: log-group
        orderLog-in-0:
          destination: LOG_ORDER_TOPIC
          content-type: application/json
          group: log-group
        paymentLog-in-0:
          destination: LOG_PAYMENT_TOPIC
          content-type: application/json
          group: log-group
        stockLog-in-0:
          destination: LOG_STOCK_TOPIC
          content-type: application/json
          group: log-group
        # 添加其他服务日志topic
        authLog-in-0:
          destination: LOG_AUTH_TOPIC
          content-type: application/json
          group: log-group
        gatewayLog-in-0:
          destination: LOG_GATEWAY_TOPIC
          content-type: application/json
          group: log-group
  # Config 配置
  config:
    import: optional:nacos:common
  
  # 自动配置排除
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration
      - org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration
      - org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration

  # OAuth2 资源服务器配置
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://127.0.0.1:80/.well-known/jwks.json
          cache-duration: PT30M

# JWT 发行者配置
app:
  jwt:
    issuer: http://localhost:8080

# 统一权限管理配置
unified:
  security:
    enabled: true
    permission:
      # 动态权限更新间隔(秒)
      refresh-interval: 300
      # 权限缓存过期时间(秒)
      cache-ttl: 1800
      # 启用权限调试模式
      debug: false

# 日志配置
logging:
  file:
    path: ./log-service/logs
    name: ${logging.file.path}/log-service.log
  level:
    com.cloud: info
    org.springframework.security: warn
    org.springframework.web: warn

# 日志服务专用配置
log:
  async:
    enabled: true
  notification:
    enabled: true
  statistics:
    enabled: true

# SpringDoc 配置
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs

# Knife4j 配置
knife4j:
  enable: true
  production: false
  basic:
    enable: false
  setting:
    language: ZH_CN
# Spring Boot Actuator配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
    enabled-by-default: true
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
    info:
      enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  health:
    redis:
      enabled: false
    db:
      enabled: false
    nacos:
      enabled: true
    elasticsearch:
      enabled: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true