server:
  port: 8083

spring:
  application:
    name: product-service
  profiles:
    active: dev

  # Nacos 配置
  cloud:
    nacos:
      discovery:
        server-addr: ${NACOS_SERVER_ADDR:localhost:8848}
        username: nacos
        password: nacos
        namespace: public
        group: DEFAULT_GROUP
      config:
        server-addr: ${NACOS_SERVER_ADDR:localhost:8848}
        username: nacos
        password: nacos
        namespace: public
        file-extension: yaml
        group: DEFAULT_GROUP

    # RocketMQ Stream 配置
    stream:
      rocketmq:
        binder:
          name-server: ${ROCKETMQ_NAME_SERVER:127.0.0.1:39876}
      bindings:
        productLog-out-0:
          destination: LOG_PRODUCT_TOPIC
          content-type: application/json
          producer:
            partition-count: 4
        # 日志生产者绑定
        logProducer-out-0:
          destination: LOG_COLLECTION_TOPIC
          content-type: application/json
          producer:
            partition-count: 4
        search-producer-out-0:
          destination: SEARCH_EVENTS_TOPIC
          content-type: application/json
          group: product-search-producer-group
          producer:
            partition-count: 4

  # Config 配置
  config:
    import: optional:nacos:common

  # 多级缓存配置
  cache:
    type: caffeine
    caffeine:
      spec: initialCapacity=150,maximumSize=1500,expireAfterWrite=45m,expireAfterAccess=20m,recordStats
    cache-names:
      - productCache
      - productListCache
      - categoryCache
      - brandCache
      - productStatsCache

  # OAuth2 资源服务器配置
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://127.0.0.1:80/.well-known/jwks.json

# 日志配置
logging:
  file:
    path: ./product-service/logs
    name: ${logging.file.path}/product-service.log
  level:
    root: INFO
    com.cloud.product: DEBUG
    com.baomidou.mybatisplus: DEBUG
    org.springframework.cache: DEBUG
    org.springframework.data.redis: DEBUG

# MyBatis Plus 配置
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    jdbc-type-for-null: null
    call-setters-on-nulls: true
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
  global-config:
    db-config:
      id-type: auto
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0
      insert-strategy: not_null
      update-strategy: not_null
      select-strategy: not_null
  mapper-locations: classpath*:/mapper/**/*.xml
  type-aliases-package: com.cloud.product.module.entity

# 多级缓存自定义配置
cache:
  multi-level:
    local:
      enabled: true
      initial-capacity: 150
      maximum-size: 1500
      expire-after-write: 45m
      expire-after-access: 20m
      record-stats: true
    redis:
      enabled: true
      default-expire: 60m
      key-prefix: "product:"
      enable-key-prefix: true
      use-key-prefix: true

# SpringDoc 配置
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  info:
    title: 商品服务API文档
    description: 提供商品管理相关的REST API接口
    version: 1.0.0
    contact:
      name: what's up
      email: example@example.com
    license:
      name: MIT License
      url: https://opensource.org/licenses/MIT

# Knife4j 配置
knife4j:
  enable: true
  production: false
  basic:
    enable: false
  setting:
    language: ZH_CN
  insight:
    service-name: ${spring.application.name}

# 商品服务专用配置
product:
  async:
    enabled: true
  statistics:
    enabled: true
  search:
    enabled: true
  config:
    page:
      default-size: 10
      max-size: 100
    batch:
      max-size: 100
    cache:
      warmup:
        enabled: true
        max-size: 500

# 健康检查配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,caches
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
    metrics:
      enabled: true
    caches:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}