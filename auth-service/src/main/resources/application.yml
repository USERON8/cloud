server:
  port: 8081
  tomcat:
    threads:
      max: 200
      min-spare: 10
    max-connections: 8192
    accept-count: 100

spring:
  application:
    name: auth-service
  profiles:
    active: dev
  main:
    allow-circular-references: true

  # Nacos 配置
  cloud:
    nacos:
      discovery:
        server-addr: ${NACOS_SERVER_ADDR:localhost:8848}
        username: nacos
        password: nacos
        namespace: public
        group: DEFAULT_GROUP
      config:
        server-addr: ${NACOS_SERVER_ADDR:localhost:8848}
        username: nacos
        password: nacos
        namespace: public
        file-extension: yaml
        group: DEFAULT_GROUP

    # RocketMQ Stream 配置
    stream:
      rocketmq:
        binder:
          name-server: ${ROCKETMQ_NAME_SERVER:127.0.0.1:39876}
      bindings:
        log-in-0:
          destination: LOG_AUTH_TOPIC
          content-type: application/json
          group: auth-log-group

  # Config 配置
  config:
    import: optional:nacos:common

  # OAuth2 配置
  security:
    oauth2:
      client:
        registration:
          web-client:
            client-id: web-client
            client-secret: WebClient@2024#Secure
            client-authentication-method: client_secret_basic
            authorization-grant-type: authorization_code
            redirect-uri: http://127.0.0.1:80/authorized
            scope: openid,profile,read,write,user.read,user.write,order.read,order.write
            client-name: Web Client
          github:
            client-id: Ov23li4lW4aaO4mlFGRf
            client-secret: 6afee51f8c5b77a7b3a20dc6b8e41d9b4c60e55d
          client-service:
            provider: custom-authorization-server
            client-id: client-service
            client-secret: ClientService@2024#Secure
            authorization-grant-type: client_credentials
            scope: internal_api,service.read,service.write
        provider:
          custom-authorization-server:
            token-uri: http://127.0.0.1:8081/oauth2/token
      resourceserver:
        jwt:
          jwk-set-uri: http://127.0.0.1:8081/.well-known/jwks.json

  # 自动配置排除
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration
      - org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration

# 日志配置
logging:
  file:
    path: logs
    name: ${logging.file.path}/auth-service.log
  level:
    root: info
    com.cloud.auth: debug
    org.springframework.security: debug
    org.springframework.web: warn

# 应用自定义配置
app:
  jwt:
    test-mode: true
    issuer: http://127.0.0.1:8081
    access-token-validity: PT2H
    test-token-validity: P365D

# SpringDoc 配置
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  group-configs:
    - group: 'auth'
      paths-to-match: '/auth/**'
    - group: 'oauth2'
      paths-to-match: '/oauth2/**'
  default-flat-param-object: true

# Knife4j 配置
knife4j:
  enable: true
  production: false
  basic:
    enable: false
  setting:
    language: ZH_CN
  insight:
    service-name: ${spring.application.name}

# Spring Boot Actuator配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
    enabled-by-default: true
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
    info:
      enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
    shutdown:
      enabled: false
  health:
    redis:
      enabled: true
    nacos:
      enabled: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
