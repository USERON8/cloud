server:
  port: 8080

spring:
  application:
    name: auth-service
  main:
    allow-circular-references: true
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        username: nacos
        password: nacos
        namespace: public
        group: DEFAULT_GROUP
      config:
        server-addr: localhost:8848
        username: nacos
        password: nacos
        namespace: public
        file-extension: yaml
        group: DEFAULT_GROUP
    stream:
      rocketmq:
        binder:
          name-server: 127.0.0.1:39876
      bindings:
        log-in-0:
          destination: LOG_AUTH_TOPIC
          content-type: application/json
          group: auth-log-group
  config:
    import: optional:nacos:common
  datasource:
    url: jdbc:mysql://localhost:3306/cloud_auth?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true
    username: root
    password: root
  data:
    redis:
      host: localhost
      port: 6379
      password: root
      database: 5
      timeout: 10000ms
      lettuce:
        pool:
          max-active: 16
          max-wait: -1ms
          max-idle: 8
          min-idle: 2
  security:
    oauth2:
      client:
        registration:
          web-client:
            client-id: web-client
            client-secret: WebClient@2024#Secure
            client-authentication-method: client_secret_basic
            authorization-grant-type: authorization_code
            redirect-uri: http://127.0.0.1:80/authorized
            scope: openid,profile,read,write,user.read,user.write,order.read,order.write
            client-name: Web Client
          github:
            client-id: Ov23li4lW4aaO4mlFGRf
            client-secret: 6afee51f8c5b77a7b3a20dc6b8e41d9b4c60e55d
          client-service:
            provider: custom-authorization-server
            client-id: client-service
            client-secret: ClientService@2024#Secure
            authorization-grant-type: client_credentials
            scope: internal_api,service.read,service.write
        provider:
          custom-authorization-server:
            token-uri: http://127.0.0.1:80/oauth2/token
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/.well-known/jwks.json
  autoconfigure:
    exclude: org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: false
# SpringDoc OpenAPI 配置
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  group-configs:
    - group: 'auth'
      paths-to-match: '/api/v1/auth/**'
    - group: 'oauth2'
      paths-to-match: '/oauth2/**'
  default-flat-param-object: true

# Knife4j 配置
knife4j:
  enable: true
  production: false
  basic:
    enable: false
  setting:
    language: ZH_CN
  insight:
    service-name: ${spring.application.name}

logging:
  file:
    path: D:/logs/${spring.application.name}
    name: ${logging.file.path}/${spring.application.name}.log
  level:
    root: info
    com.cloud.auth: debug
    org.springframework.security: debug
    org.springframework.web: warn